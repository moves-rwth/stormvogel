import stormvogel.result
import pytest
import stormvogel.examples.monty_hall

try:
    import stormpy
except ImportError:
    stormpy = None


def test_convert_model_checker_results_dtmc():
    assert stormpy is not None
    path = stormpy.examples.files.prism_dtmc_die
    prism_program = stormpy.parse_prism_program(path)
    formula_str = "P=? [F s=7 & d=2]"
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)
    result = stormpy.model_checking(model, properties[0])

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)
    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None
    assert pytest.approx(list(stormvogel_result.values.values())) == [
        0.16666666666666669,
        0.33333333333333337,
        0.0,
        0.16666666666666674,
        0.5,
        0.0,
        0.0,
        0.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]


def test_convert_model_checker_results_dtmc_qualitative():
    assert stormpy is not None
    path = stormpy.examples.files.prism_dtmc_die
    prism_program = stormpy.parse_prism_program(path)
    formula_str = "P>=0.5 [F s=7 & d=2]"
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)
    result = stormpy.model_checking(model, properties[0])

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)
    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None

    assert pytest.approx(list(stormvogel_result.values.values())) == [
        False,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        True,
        False,
        False,
        False,
        False,
    ]


def test_convert_model_checker_results_mdp():
    assert stormpy is not None
    path = stormpy.examples.files.prism_mdp_coin_2_2

    prism_program = stormpy.parse_prism_program(path)
    formula_str = 'Pmin=? [F "finished" & "all_coins_equal_1"]'
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)

    result = stormpy.model_checking(model, properties[0], extract_scheduler=True)

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)

    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None

    assert pytest.approx(list(stormvogel_result.values.values())) == [
        0.3828112753064229,
        0.265623936195459,
        0.4999986144173868,
        0.265623936195459,
        0.4999986144173868,
        0.265623936195459,
        0.15624925797353115,
        0.3749986144173868,
        0.5039048397998056,
        0.3749986144173868,
        0.6249986144173868,
        0.265623936195459,
        0.5039048397998056,
        0.265623936195459,
        0.15624925797353115,
        0.3749986144173868,
        0.15624925797353115,
        0.3828110651822245,
        0.5039048397998056,
        0.3828110651822245,
        0.6249986144173868,
        0.3749986144173868,
        0.6249986144173868,
        0.15624925797353115,
        0.3749986144173868,
        0.15624925797353115,
        0.3749986144173868,
        0.15624925797353115,
        0.3828110651822245,
        0.3828110651822245,
        0.6249986144173868,
        0.3828110651822245,
        0.6249986144173868,
        0.6269517249967417,
        0.15624925797353115,
        0.06249966380128266,
        0.24999885214577963,
        0.3828110651822245,
        0.24999885214577963,
        0.49999837668899394,
        0.15624925797353115,
        0.3828110651822245,
        0.26562375367545515,
        0.49999837668899394,
        0.6269517249967417,
        0.49999837668899394,
        0.7499988521457797,
        0.6269517249967417,
        0.15624925797353115,
        0.06249966380128266,
        0.24999885214577963,
        0.06249966380128266,
        0.26562375367545515,
        0.26562375367545515,
        0.49999837668899394,
        0.24999885214577963,
        0.49999837668899394,
        0.5039045978477037,
        0.6269517249967417,
        0.5039045978477037,
        0.7499988521457797,
        0.7499988521457797,
        0.06249966380128266,
        0.24999885214577963,
        0.06249966380128266,
        0.24999885214577963,
        0.06249966380128266,
        0.26562375367545515,
        0.5039045978477037,
        0.5039045978477037,
        0.7499988521457797,
        0.5039045978477037,
        0.7499988521457797,
        0.7509754061983613,
        0.06249966380128266,
        0.0,
        0.12499932760256532,
        0.12499932760256532,
        0.37499837668899394,
        0.06249966380128266,
        0.38281081900641334,
        0.6249983766889939,
        0.7509754061983613,
        0.6249983766889939,
        0.8749993276025654,
        0.7509754061983613,
        0.06249966380128266,
        0.0,
        0.12499932760256532,
        0.0,
        0.12499932760256532,
        0.6269514847941573,
        0.7509754061983613,
        0.6269514847941573,
        0.8749993276025654,
        0.8749993276025654,
        0.0,
        0.12499932760256532,
        0.0,
        0.12499932760256532,
        0.0,
        0.6269514847941573,
        0.8749993276025654,
        0.6269514847941573,
        0.8749993276025654,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.24999865520513065,
        0.0,
        0.0,
        0.0,
        0.5039043143831838,
        0.7499986552051308,
        0.8754876039041822,
        0.7499986552051308,
        1.0,
        0.8754876039041822,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.7509752078083645,
        0.937499790931729,
        0.7509752078083645,
        1.0,
        1.0,
        0.937499790931729,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.8749995818634579,
        0.8749995818634579,
        1.0,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.8749995818634579,
        0.8749995818634579,
        1.0,
        1.0,
        0.0,
        0.0,
        0.0,
        0.8749995818634579,
        0.8749995818634579,
        1.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.7499991637269159,
        1.0,
        0.7499991637269159,
        1.0,
        0.0,
        0.0,
        0.7499991637269159,
        0.7499991637269159,
        0.0,
        0.0,
        0.7499991637269159,
        0.7499991637269159,
        0.0,
        0.0,
        0.0,
        0.0,
        0.6249988173312626,
        0.8749995101225692,
        0.6249988173312626,
        0.8749995101225692,
        0.0,
        0.0,
        0.6249988173312626,
        0.6249988173312626,
        0.0,
        0.0,
        0.6249988173312626,
        0.6249988173312626,
        0.0,
        0.0,
        0.0,
        0.0,
        0.4999986144173868,
        0.7499990202451383,
        0.4999986144173868,
        0.7499990202451383,
        0.0,
        0.0,
        0.4999986144173868,
        0.4999986144173868,
        0.0,
        0.0,
        0.4999986144173868,
        0.4999986144173868,
        0.0,
        0.0,
        0.0,
        0.0,
        0.3749986144173868,
        0.6249986144173868,
        0.3749986144173868,
        0.6249986144173868,
        0.0,
        0.0,
        0.3749986144173868,
        0.3749986144173868,
        0.0,
        0.0,
        0.3749986144173868,
        0.3749986144173868,
        0.0,
        0.0,
        0.0,
        0.0,
        0.24999885214577963,
        0.49999837668899394,
        0.24999885214577963,
        0.49999837668899394,
        0.0,
        0.0,
        0.24999885214577963,
        0.24999885214577963,
        0.0,
        0.0,
        0.24999885214577963,
        0.24999885214577963,
        0.0,
        0.0,
        0.0,
        0.0,
        0.12499932760256532,
        0.37499837668899394,
        0.12499932760256532,
        0.37499837668899394,
        0.0,
        0.0,
        0.12499932760256532,
        0.12499932760256532,
        0.0,
        0.0,
        0.12499932760256532,
        0.12499932760256532,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.24999865520513065,
        0.0,
        0.24999865520513065,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
        0.0,
    ]

    assert stormvogel_result.scheduler is not None
    assert [
        0,
        2,
        5,
        6,
        8,
        10,
        12,
        14,
        16,
        19,
        20,
        22,
        24,
        26,
        28,
        30,
        32,
        34,
        36,
        38,
        40,
        43,
        45,
        46,
        49,
        50,
        52,
        54,
        56,
        58,
        61,
        62,
        64,
        66,
        68,
        70,
        72,
        75,
        77,
        78,
        80,
        82,
        84,
        86,
        88,
        91,
        92,
        94,
        96,
        98,
        100,
        102,
        104,
        107,
        108,
        111,
        113,
        114,
        116,
        118,
        120,
        123,
        124,
        127,
        128,
        130,
        132,
        134,
        136,
        139,
        141,
        142,
        144,
        146,
        148,
        150,
        152,
        155,
        156,
        158,
        160,
        162,
        164,
        167,
        168,
        170,
        172,
        174,
        176,
        178,
        181,
        183,
        184,
        186,
        188,
        191,
        192,
        195,
        196,
        198,
        200,
        203,
        205,
        206,
        208,
        210,
        212,
        214,
        216,
        219,
        220,
        222,
        224,
        225,
        226,
        228,
        231,
        233,
        234,
        236,
        238,
        239,
        240,
        241,
        243,
        245,
        248,
        249,
        250,
        251,
        253,
        255,
        256,
        258,
        260,
        261,
        262,
        263,
        264,
        266,
        267,
        268,
        269,
        270,
        271,
        273,
        274,
        275,
        276,
        277,
        278,
        279,
        280,
        281,
        282,
        283,
        284,
        285,
        286,
        287,
        288,
        289,
        290,
        291,
        292,
        293,
        294,
        295,
        296,
        297,
        298,
        299,
        300,
        301,
        302,
        303,
        304,
        305,
        306,
        307,
        308,
        309,
        310,
        311,
        312,
        313,
        314,
        315,
        316,
        317,
        318,
        319,
        320,
        321,
        322,
        323,
        324,
        325,
        326,
        327,
        328,
        329,
        330,
        331,
        332,
        333,
        334,
        335,
        336,
        337,
        338,
        339,
        340,
        341,
        342,
        343,
        344,
        345,
        346,
        347,
        348,
        349,
        350,
        351,
        352,
        353,
        354,
        355,
        356,
        357,
        358,
        359,
        360,
        361,
        362,
        363,
        364,
        365,
        366,
        367,
        368,
        369,
        370,
        371,
        372,
        373,
        374,
        375,
        376,
        377,
        378,
        379,
        380,
        381,
        382,
        383,
        384,
        385,
        386,
        387,
        388,
        389,
        390,
        391,
        392,
        393,
        394,
        395,
        396,
        397,
        398,
        399,
    ] == [
        int(list(action.labels)[0])
        for action in stormvogel_result.scheduler.taken_actions.values()
    ]


def test_convert_model_checker_results_mdp_qualitative():
    assert stormpy is not None
    path = stormpy.examples.files.prism_mdp_coin_2_2

    prism_program = stormpy.parse_prism_program(path)
    formula_str = 'P>=0.5 [F "finished" & "all_coins_equal_1"]'
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)
    result = stormpy.model_checking(model, properties[0], extract_scheduler=True)

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)
    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None

    assert pytest.approx(list(stormvogel_result.values.values())) == [
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        False,
        False,
        False,
        True,
        True,
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        True,
        True,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        True,
        True,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        True,
        False,
        True,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
        False,
    ]


def test_induced_dtmc():
    assert stormpy is not None
    path = stormpy.examples.files.prism_mdp_coin_2_2

    prism_program = stormpy.parse_prism_program(path)
    formula_str = 'Pmin=? [F "finished" & "all_coins_equal_1"]'
    properties = stormpy.parse_properties(formula_str, prism_program)

    model = stormpy.build_model(prism_program, properties)

    result = stormpy.model_checking(model, properties[0], extract_scheduler=True)

    stormvogel_model = stormvogel.mapping.stormpy_to_stormvogel(model)

    assert stormvogel_model is not None
    stormvogel_result = stormvogel.result.convert_model_checking_result(
        stormvogel_model, result
    )
    assert stormvogel_result is not None
    induced_dtmc = stormvogel_result.generate_induced_dtmc()

    assert induced_dtmc

    # TODO better test (where we also precisely know the induced dtmc)
